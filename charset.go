package st7066u

import "unicode/utf8"

func strToSt70660b(inp string) (ut []byte) {
	ut = make([]byte, utf8.RuneCountInString(inp))
	i := 0
	for _, c := range inp {
		ut[i] = runeToSt70660b(c)
		i++
		/*
			if val, ok := charMap[c]; ok {
				ut[i] = val
			} else {
				ut[i] = 0x3f // Question mark
			}
		*/
	}
	return
}

func runeToSt70660b(inp rune) byte {
	if _, ok := charMap[inp]; ok {
		return charMap[inp]
	}
	return 0x3f // Question mark
}

var charMap = map[rune]byte{
	'!':      0x21,
	'"':      0x22,
	'#':      0x23,
	'$':      0x24,
	'%':      0x25,
	'&':      0x26,
	'\'':     0x27, // Wrong?
	'(':      0x28,
	')':      0x29,
	'*':      0x2a,
	'+':      0x2b,
	',':      0x2c,
	'\u002d': 0x2d,
	'\u2010': 0x2d,
	'\u2011': 0x2d,
	'\u2012': 0x2d,
	'\u2013': 0x2d,
	'\u2014': 0x2d,
	'\u2015': 0x2d,
	'.':      0x2e,
	'/':      0x2f,
	'0':      0x30,
	'1':      0x31,
	'2':      0x32,
	'3':      0x33,
	'4':      0x34,
	'5':      0x35,
	'6':      0x36,
	'7':      0x37,
	'8':      0x38,
	'9':      0x39,
	':':      0x3a,
	';':      0x3b,
	'<':      0x3c,
	'=':      0x3d,
	'>':      0x3e,
	'?':      0x3f,
	'@':      0x40,
	'A':      0x41,
	'B':      0x42,
	'C':      0x43,
	'D':      0x44,
	'E':      0x45,
	'F':      0x46,
	'G':      0x47,
	'H':      0x48,
	'I':      0x49,
	'J':      0x4a,
	'K':      0x4b,
	'L':      0x4c,
	'M':      0x4d,
	'N':      0x4e,
	'O':      0x4f,
	'P':      0x50,
	'Q':      0x51,
	'R':      0x52,
	'S':      0x53,
	'T':      0x54,
	'U':      0x55,
	'V':      0x56,
	'W':      0x57,
	'X':      0x58,
	'Y':      0x59,
	'Z':      0x5a,
	'[':      0x5b,
	'¬•':      0x5c,
	']':      0x5d,
	'^':      0x5e,
	'_':      0x5f,
	'`':      0x60,
	'a':      0x61,
	'b':      0x62,
	'c':      0x63,
	'd':      0x64,
	'e':      0x65,
	'f':      0x66,
	'g':      0x67,
	'h':      0x68,
	'i':      0x69,
	'j':      0x6a,
	'k':      0x6b,
	'l':      0x6c,
	'm':      0x6d,
	'n':      0x6e,
	'o':      0x6f,
	'p':      0x70,
	'q':      0x71,
	'r':      0x72,
	's':      0x73,
	't':      0x74,
	'u':      0x75,
	'v':      0x76,
	'w':      0x77,
	'x':      0x78,
	'y':      0x79,
	'z':      0x7a,
	'{':      0x7b,
	'|':      0x7c,
	'}':      0x7d,
	'‚Üí':      0x7e,
	'‚Üê':      0x7f,
	'ÔΩ°':      0xa1,
	'ÔΩ¢':      0xa2,
	'ÔΩ£':      0xa3,
	'ÔΩ§':      0xa4,
	'ÔΩ•':      0xa5,
	'ÔΩ¶':      0xa6,
	'ÔΩß':      0xa7,
	'ÔΩ®':      0xa8,
	'ÔΩ©':      0xa9,
	'ÔΩ™':      0xaa,
	'ÔΩ´':      0xab,
	'ÔΩ¨':      0xac,
	'ÔΩ≠':      0xad,
	'ÔΩÆ':      0xae,
	'ÔΩØ':      0xaf,
	'ÔΩ∞':      0xb0,
	'ÔΩ±':      0xb1,
	'ÔΩ≤':      0xb2,
	'ÔΩ≥':      0xb3,
	'ÔΩ¥':      0xb4,
	'ÔΩµ':      0xb5,
	'ÔΩ∂':      0xb6,
	'ÔΩ∑':      0xb7,
	'ÔΩ∏':      0xb8,
	'ÔΩπ':      0xb9,
	'ÔΩ∫':      0xba,
	'ÔΩª':      0xbb,
	'ÔΩº':      0xbc,
	'ÔΩΩ':      0xbd,
	'ÔΩæ':      0xbe,
	'ÔΩø':      0xbf,
	'ÔæÄ':      0xc0,
	'ÔæÅ':      0xc1,
	'ÔæÇ':      0xc2,
	'ÔæÉ':      0xc3,
	'ÔæÑ':      0xc4,
	'ÔæÖ':      0xc5,
	'ÔæÜ':      0xc6,
	'Ôæá':      0xc7,
	'Ôæà':      0xc8,
	'Ôæâ':      0xc9,
	'Ôæä':      0xca,
	'Ôæã':      0xcb,
	'Ôæå':      0xcc,
	'Ôæç':      0xcd,
	'Ôæé':      0xce,
	'Ôæè':      0xcf,
	'Ôæê':      0xd0,
	'Ôæë':      0xd1,
	'Ôæí':      0xd2,
	'Ôæì':      0xd3,
	'Ôæî':      0xd4,
	'Ôæï':      0xd5,
	'Ôæñ':      0xd6,
	'Ôæó':      0xd7,
	'Ôæò':      0xd8,
	'Ôæô':      0xd9,
	'Ôæö':      0xda,
	'Ôæõ':      0xdb,
	'Ôæú':      0xdc,
	'Ôæù':      0xdd,
	'Ôæû':      0xde,
	'Ôæü':      0xdf,
	'Œ±':      0xe0,
	'√§':      0xe1,
	'√ü':      0xe2,
	'Œ≤':      0xe2,
	'Œµ':      0xe3,
	'Œº':      0xe4,
	'œÉ':      0xe5, // '√∂'
	'œÅ':      0xe6,
	//'':       0xe7, // Super g
	'‚àö': 0xe8,
	//'': 0xe9, // Superscript minus one
	//	'': 0xea, // Super j
	//	'': 0xeb, // Asterisk?
	'¬¢': 0xec,
	'Ôø†': 0xec,
	'‚Ç∫': 0xed,
	'√±': 0xee,
	'√∂': 0xef,
	//	'':          0xf0, // Super p
	// 	'':          0xf1, // Super q
	'Œ∏': 0xf2,
	'‚àû': 0xf3,
	'Œ©': 0xf4,
	'√º': 0xf5,
	'Œ£': 0xf6,
	'œÄ': 0xf7,
	'ùúã': 0xf7,
	'Œ†': 0xf7,
	//	'': 0xf8, // x bar
	//	'':          0xf9, // Super y
	//	'ÔæÅ': 0xfa, // Wrong?
	'„á≤': 0xfb, // Wrong?
	//	'':          0xfc,
	'√∑': 0xfd,
	//	'': 0xfe,
	'‚¨õ': 0xff,
}
